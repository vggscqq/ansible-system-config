---
# tasks to complete before running roles
- hosts: all
  tags: always
  become: true

  pre_tasks:
    - name: pre-run | update package cache (arch)
      tags: always
      pacman: update_cache=yes
      changed_when: False
      when: ansible_distribution == "Archlinux"

    - name: pre-run | update package cache (debian, etc)
      tags: always
      apt: update_cache=yes
      changed_when: False
      when: ansible_distribution in ["Debian", "Ubuntu"]

# need to be installed in order to playbook to work
  tasks:
  - name: install ansible packages
    package:
      name:
        - unrar
        - rsync

# run roles
- hosts: all
  tags: base
  become: true
  roles:
    - base

- hosts: workstation
  tags: workstation
  become: true
  roles:
    - workstation

- hosts: server
  tags: server
  become: true
  roles:
    - server

# end of run: cleanup (debian and ubuntu only)
- hosts: all
  become: true
  tasks:
  - name: cleanup package cache (debian and ubuntu)
    tags: always
    apt:
      autoclean: yes
    changed_when: false
    when: ansible_distribution in ["Debian", "Ubuntu"]

  - name: autoremove orphan packages (debian and ubuntu)
    tags: always
    apt:
      autoremove: yes
      purge: yes
    when: ansible_distribution in ["Debian", "Ubuntu"]


#  - name: set up sudo for ansible user
#    copy:
#      src: files/sudoer_vgscq
#      dest: /etc/sudoers.d/vgscq
#      owner: root
#      group: root
#      mode: 0440

#  - name: create ansible-pull service file
#    copy:
#      dest: /etc/systemd/system/ansible-pull.service
#      content: |
#        [Unit]
#        Description=Run ansible-pull for auto-provisioning
#
#        [Service]
#        User=vgscq
#        ExecStart=/usr/bin/ansible-pull -o -U https://github.com/vggscqq/ansible-system-config.git
#        WorkingDirectory=/home/vgscq
#        Environment=HOME=/home/vgscq
#        Environment=USER=vgscq
#
#  - name: create ansible-pull timer file
#    copy:
#      dest: /etc/systemd/system/ansible-pull.timer
#      content: |
#        [Unit]
#        Description=Run ansible-pull every 30 minutes
#
#        [Timer]
#        OnCalendar=*:0/30
#        Persistent=true
#
#        [Install]
#        WantedBy=timers.target
#
#  - name: reload systemd
#    command: systemctl daemon-reload
#
#  - name: enable and start ansible-pull timer
#    systemd:
#      name: ansible-pull.timer
#      enabled: yes
#      state: started
#
#